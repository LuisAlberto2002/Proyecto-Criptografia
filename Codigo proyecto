//Bibliotecas necesarias para ejecucion
#include <iostream>
#include <fstream>
#include "Conio.h"
#include <stdio.h>
#include "sodium.h"
#include <vector>
#include <string.h>
#include <iomanip>
using namespace std;
int main(){
    //variables necesarias para ejecucion
    unsigned char* key;
    unsigned char* nounce;
    unsigned char* cifrado;
    //Comprobar que libsodium este disponible
    if (sodium_init() == -1) {
        return 1;
    }

    
    // Variables necesarias para ejecucion pero que requeiren confirmaciond e lipsodium
    key = (unsigned char*)malloc(crypto_stream_chacha20_KEYBYTES);
    nounce = (unsigned char*)malloc(crypto_stream_chacha20_NONCEBYTES);
    randombytes_buf(nounce, crypto_stream_chacha20_NONCEBYTES);
    cifrado = (unsigned char*)malloc(crypto_stream_chacha20_NONCEBYTES);
    unsigned char hash[crypto_generichash_BYTES];
    int mlen;
    //Variable para la lectura de documento, inicio de sesion y firma del documento
    string temp;
    string temp2;
    string texto;
    string texto2;
    unsigned char* reto = (unsigned char*)(texto.c_str());
    unsigned char ID[(sizeof(texto) + 14)] = "rendon.a.la@gmail.com";
    string usuario = "Luis";
    int contrasena = 3321;
    string compro_usuario;
    int compro_contrasena;
    string direccion="";
    string documento;
    string ubicacion;
    const char* llave;
    const char* informacion;
    unsigned char MAC[crypto_auth_hmacsha512_BYTES];
    //Inicio del menu
    //Comprobacion de usuario y contrasena
    printf("Ingrese su usuario: ");
    cin >> compro_usuario;
    if (compro_usuario._Equal(usuario)) {
        printf("Ingrese su contrasena: ");
        scanf_s("%d",&compro_contrasena);
        if (compro_contrasena == contrasena) {
            int eleccion = 0;
            //Seleccion de opciones para el usuario
            while (eleccion != 9) {
                printf("\n!!!Menu!!!\n\n");
                printf("\n1.- Ingresar/modificar direccion de guardado");
                printf("\n2.- Mostrar direccion de guardado");
                printf("\n3.- Generar llave");
                printf("\n4.- Recuperar llave");
                printf("\n5.- Cifrar");
                printf("\n6.- Decifrar");
                printf("\n7.- firma");
                printf("\n8.- Verificar firma");
                printf("\n9.- Salir\n\n");
                printf("Que desea realizar?: ");
                scanf_s("%d", &eleccion);

                //Eleccion 1 agregar direccion de carpeta
                if (eleccion == 1) {
                    printf("\nIngrese direccion de guardado: ");
                    cin >> direccion;
                    printf("\n !!!Direccion guardada exitosamente!!!\n\n");

                }
                //Eleccion 2 mostrar direccion de carpeta
                else if (eleccion == 2) {
                    //En caso de que no exista una direccion te lanzara un mensaje de aviso
                    //Es recomendable ejecutar esta opcion si usas el programa mucho tiempo para 
                    //Asegurarte de que la capeta sea la correcta.
                    if (direccion == "") {
                        printf("\n!!!No existe ninguna direccion de guardado!!!\n\n");
                    }
                    else {
                    cout <<"\nDireccion de guardado: " << direccion<<"\n";
                    }
                }
                //Eleccion 3 generar llave
                else if (eleccion == 3) {
                    //Genera la llave de forma aleatoria, genera un documento txt y guarda la llave ahi.
                    randombytes_buf(key, crypto_stream_chacha20_KEYBYTES);
                    ofstream file;
                    cout << "\nIngrese nombre del documento: ";
                    cin >> documento;
                    ubicacion = direccion + documento;
                    file.open(ubicacion);
                    file << key;
                    file.close();
                    printf("\n!!!Llave generada exitosamente!!!\n");
                }
                //Eleccion 4 recuperar llave
                else if (eleccion == 4) {
                    //Ingresas el nombre del documento donde se encuentra la llave
                    cout << "\nIngrese nombre del documento: ";
                    cin >> documento;
                    //Para que esto funcione primero debiste ingresar una direccion de carpeta
                    //Ya que mezcla en un solo string la direccion de la carpeta y el nombre del archivo para
                    //realizar la busqueda. 
                    ubicacion = direccion + documento;
                    string nombreArchivo = (ubicacion);
                    ifstream contrasena_recu (nombreArchivo.c_str());
                    while (!contrasena_recu.eof()) {
                        contrasena_recu >> temp2;
                        texto2 += " " + temp2;
                    }
                    contrasena_recu.close();
                    //Respues de leer el documento guarda la llave en una variable distinta
                    llave = texto2.c_str();
                    //despues realizamos un cast para guardar la llave recuperada en nuestro apuntador key.
                    key =(unsigned char*) llave;
                    printf("\nLlave: %x\n\n", key);
                    //cout << "\nUbicacion del archivo: " << ubicacion << "\n";

                }
                //Opcion 5 Cifrar documento
                else if (eleccion == 5) {
                    //Ingresamos el nombre del documento a cifrar
                    cout << "\nIngrese nombre del documento: ";
                    cin >> documento;
                    ubicacion = direccion + documento;
                    string nombreArchivo = (ubicacion);
                    //realiza lectura de documento
                    ifstream archivo(nombreArchivo.c_str());
                    while (!archivo.eof()) {
                        archivo >> temp;
                        texto += " " + temp;
                    }
                    archivo.close();
                    //Estructura char para convertir string en un tipo de variable aceptable para la funcion.
                    informacion = texto.c_str();
                    const unsigned char* texto3;
                    texto3 = (const unsigned char*)informacion;
                    //Generacion del valor del apuntador nounce
                    randombytes_buf(nounce, crypto_stream_chacha20_NONCEBYTES);
                    mlen = sizeof(texto3);
                    //Uso de la funcion de cifrado chacha20 de lipsodium
                    crypto_stream_chacha20_xor(cifrado, texto3, mlen, nounce, key);
                    //Creacion de nuevo documento donde almacenar el texto cifrado.
                    ofstream file;
                    cout << "\nIngrese nombre del documento cifrado: ";
                    cin >> documento;
                    ubicacion = direccion + documento;
                    file.open(ubicacion);
                    file << cifrado;
                    file.close();

                    printf("\nDocumento cifrado y guardado\n");

                }//Opcion 6 Decifrado de archivo
                else if (eleccion == 6) {
                    //Ingresar nombre del documento cifrado
                    cout << "\nIngrese nombre del documento cifrado: ";
                    cin >> documento;
                    ubicacion = direccion + documento;
                    string nombreArchivo = (ubicacion);
                    //Inicia la busqueda y lectura del documento
                    ifstream archivo(nombreArchivo.c_str());
                    while (!archivo.eof()) {
                        archivo >> temp;
                        texto += " " + temp;
                    }
                    archivo.close();
                    //Estructura char
                    informacion = texto.c_str();
                    unsigned char* texto3;
                    texto3 = (unsigned char*) (informacion);
                    mlen = sizeof(texto3);
                    //Llamado a la funcion chacha20 para decifrar el mensaje
                    crypto_stream_chacha20_xor(texto3, cifrado, mlen, nounce, key);
                    //Generacion del documento donde guardar el mensaje decifrado
                    ofstream file;
                    cout << "\nIngrese nombre del documento decifrado: ";
                    cin >> documento;
                    ubicacion = direccion + documento;
                    file.open(ubicacion);
                    file << texto3;
                    file.close();
                    printf("\n!!!Documento decifrado!!!\n");
                }//Opcion 7 Generar Firma del documento
                else if (eleccion == 7) {
                    //Ingresar nombre del documento donde almacenar la firma
                    ofstream file;
                    cout << "\nIngrese nombre del documento de la firma: ";
                    cin >> documento;
                    //Iniciar variables y funciones para crear nuestra firma.
                    unsigned char client_pk[crypto_kx_PUBLICKEYBYTES], client_sk[crypto_kx_SECRETKEYBYTES];
                    unsigned char client_rx[crypto_kx_SESSIONKEYBYTES], client_tx[crypto_kx_SESSIONKEYBYTES];
                    crypto_kx_keypair(client_pk, client_sk);

                    unsigned char server_pk[crypto_kx_PUBLICKEYBYTES], server_sk[crypto_kx_SECRETKEYBYTES];
                    unsigned char server_rx[crypto_kx_SESSIONKEYBYTES], server_tx[crypto_kx_SESSIONKEYBYTES];
                    crypto_kx_keypair(server_pk, server_sk);

                    if (crypto_kx_client_session_keys(client_rx, client_tx, client_pk, client_sk, server_pk) != 0) {
                         exit(1);
                    }

                    if (crypto_kx_client_session_keys(server_rx, server_tx, server_pk, server_sk, client_pk) != 0) {
                        exit(1);
                    }

                    
                    for (int i = 14; i < sizeof(texto); i++) {
                        ID[i] = reto[i - 14];
                    }
                    std::cout << std::endl;
                    //Llamar la funcion HMACsha512 para generar nuestra firma electronica
                    crypto_auth_hmacsha512(MAC, ID, (sizeof(texto)+14), client_tx);
                    cout <<"\nFirma: " << MAC<<"\n";  
                    //Generacion del documento donde guardar la firma.
                    ubicacion = direccion + documento;
                    file.open(ubicacion);
                    file << MAC;
                    file.close();

                }//Opcion 8 Verificacion firma de documento.
                else if (eleccion == 8) {
                    //Verificacion de la firma electronica. 
                    //Debido a ciertos contratiempos, no me fue posible contruir la parte del codigo
                    //para extraer la firma del documento. Por lo esta opcion funcionara unicamente con archivos generados
                    //por el programa en su momento.
                unsigned char client_pk[crypto_kx_PUBLICKEYBYTES], client_sk[crypto_kx_SECRETKEYBYTES];
                unsigned char client_rx[crypto_kx_SESSIONKEYBYTES], client_tx[crypto_kx_SESSIONKEYBYTES];
                crypto_kx_keypair(client_pk, client_sk);

                unsigned char server_pk[crypto_kx_PUBLICKEYBYTES], server_sk[crypto_kx_SECRETKEYBYTES];
                unsigned char server_rx[crypto_kx_SESSIONKEYBYTES], server_tx[crypto_kx_SESSIONKEYBYTES];
                crypto_kx_keypair(server_pk, server_sk);

                if (crypto_kx_client_session_keys(client_rx, client_tx, client_pk, client_sk, server_pk) != 0) {
                    exit(1);
                }

                if (crypto_kx_client_session_keys(server_rx, server_tx, server_pk, server_sk, client_pk) != 0) {
                    exit(1);
                }
                    unsigned char MACr[crypto_auth_hmacsha512_BYTES];
                    unsigned char MACserver[crypto_auth_hmacsha512_BYTES];                    
                    unsigned char IDSERVER[(sizeof(texto)+14)] = "Luis@iteso.mx";
                    for (int i = 14; i < (sizeof(texto)+14); i++) {
                        ID[i] = reto[i - 14];
                    }
                    crypto_auth_hmacsha512(MACserver, IDSERVER, (sizeof(texto)+14), client_tx);
                    int result = crypto_auth_hmacsha512_verify(MACr, MACserver, crypto_auth_hmacsha512_BYTES, server_rx);
                    std::cout << "---" << std::endl;
                    
                    std::cout << std::endl;
                    
                    if (result != 1) {
                        cout << "\nLa firma coincide, documento no alterado\n";
                    }
                    else {
                        cout << "\n La firma no coincide, documento alterado\n ";
                    }
                }
                else {
                    cout << "\n\n!!Que tenga un buen dia\n\n";
                }//Fin del menu
            }
        }
        else {
            printf("\nContrasena incorrecta");
            return -1;
        }
    }
    else {
        printf("\nUsuario incorrecto");
        return -1;
    }

}//Fin del codigo
